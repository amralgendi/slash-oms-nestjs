// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Address {
  id Int @id @default(autoincrement())
  street    String
  city      String
  country   String
  userId    Int    @unique
  user      User   @relation(fields: [userId], references: [id])
}

model User {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  email   String   @unique
  hash    String
  name    String?

  address Address?
  orders  Order[]
  carts Cart?
}

model Product {
  id              Int           @id @default(autoincrement())
  name            String
  description    String?
  price           Float
  stock           Int           @default(0)
  weight          Float?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @default(now())
  status          ProductStatus @default(PUBLISHED)
  statusUpdatedAt DateTime      @default(now())

  cartItems CartItem[]
  orderItems OrderItem[]
}

model Order {
  id Int @id @default(autoincrement())

  userId    Int
  user      User        @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  orderStatus OrderStatus @default(INIT)
  orderItems OrderItem[]

  address_street    String?
  address_city      String?
  address_country   String?
}

model OrderItem {
  orderId   Int
  productId Int

  quantity  Int
  price     Float

  order   Order   @relation(fields: [orderId], references: [id])
  product Product @relation(fields: [productId], references: [id])

  @@id([orderId, productId])
}

model Cart {
  id Int @id @default(autoincrement())

  userId    Int @unique 
  user      User @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  cartItems CartItem[]
}

model CartItem {
  cartId   Int
  productId Int

  quantity  Int

  cart   Cart   @relation(fields: [cartId], references: [id])
  product Product @relation(fields: [productId], references: [id])

  @@id([cartId, productId])
}

enum ProductStatus {
  ARCHIVED
  PUBLISHED
}

enum OrderStatus {
  INIT
  SHIPPED
  DELIVERED
}